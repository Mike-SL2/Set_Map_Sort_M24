Задания для самопроверки к модулю 24 (множество, Map, Sort)
============================================================

Задание 24.2.6 (самопроверка)
------------------------------
Напишите функцию для удаления дубликатов из массива с использованием подходящих структур данных:

function deduplicate(array) {
  // your code here...
}

deduplicate(['repeat', 'repeat', 'repeat', 'repeat', 'repeat']);  // 'repeat'
deduplicate([1,2,2,3,1,2,3,2]);  // 1, 2, 3
const obj = {some: {deep: 'object'}};
deduplicate([obj, obj]);  // obj
deduplicate([]);  // empty collection

===========================================

Задание 24.2.7 (самопроверка)
------------------------------
Напишите функцию для подсчёта количества элементов каждого вида в массиве с использованием подходящих структур данных.

Обратите внимание, что функция должна работать не только с массивами примитивов, но и с массивами объектов.

Функция должна возвращать структуру данных, где ключами будут уникальные элементы входного массива, а значениями — количество таких элементов во входном массиве:

function count(array) {
  // your code here...
}

count(['A', 'A', 'B', 'A', 'B']);  // A -> 3, B -> 2
count([]);  // empty collection

const obj1 = {key: 'value'};
const obj2 = {};
count([obj1, obj2, obj1, obj1]);  // obj1 -> 3, obj2 -> 1

===========================================

Задание 24.2.8 (самопроверка)
------------------------------
Напишите функцию с использованием подходящих структур данных, которая принимает два массива: первый — с элементами, второй — с приоритетом элементов (каждый -й элемент второго массива задаёт приоритет -му элементу первого массива).

Отсортируйте и верните структуру данных с элементами из первого массива в соответствии с приоритетами из второго массива.

Приоритеты во втором массиве имеют значения от  до количества элементов в первом массиве. Приоритеты не повторяются.

function reorder(array, order) {
  // your code here...
}

reorder(['A', 'B', 'C'], [3, 1, 2]);  // 'B', 'C', 'A'
const obj = {};
reorder([obj, obj, 1, 1], [1, 3, 4, 2]);  // obj, 1, obj, 1
reorder([5, 3, 5, 8, 2, 1, 6], [5, 3, 4, 7, 2, 1, 6]);  // 1, 2, 3, 5, 5, 6, 8